buildscript {
    ext.kotlin_version = "1.9.22"
    ext.kotlin_compose_version = "1.5.10"

    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:8.1.4"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
    }
}

repositories {
    google()
    mavenCentral()
}

apply plugin: 'kotlin-android'
apply plugin: 'com.android.application'
apply plugin: 'org.jetbrains.kotlin.plugin.serialization'

def ndkLevel = 30
def targets = [ "aarch64-linux-android", "armv7a-linux-androideabi", "i686-linux-android", "x86_64-linux-android" ]

android {
    ndkVersion "23.1.7779620"
    compileSdkVersion 34
    defaultConfig {
        minSdkVersion 26
        targetSdkVersion 34
        versionCode 198
        versionName "1.59.53-t0f042b981-g1017015de26"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion = "$kotlin_compose_version"
    }
    flavorDimensions "version"
    productFlavors {
        fdroid {
            // The fdroid flavor contains only free dependencies and is suitable
            // for the F-Droid app store.
        }
        play {
            // The play flavor contains all features and is for the Play Store.
        }
    }
    namespace 'com.tailscale.ipn'
    sourceSets {
        main {
            jniLibs.srcDirs = ['src/main/jniLibs']
        }
    }
}

dependencies {
    // Android dependencies.
    implementation "androidx.core:core:1.12.0"
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation "androidx.browser:browser:1.8.0"
    implementation "androidx.security:security-crypto:1.1.0-alpha06"
    implementation "androidx.work:work-runtime:2.9.0"

    // Kotlin dependencies.
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.3"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.8.0"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.8.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    // Compose dependencies.
    def composeBom = platform('androidx.compose:compose-bom:2023.06.01')
    implementation composeBom
    androidTestImplementation composeBom
    implementation 'androidx.compose.material3:material3:1.2.1'
    implementation 'androidx.compose.material:material-icons-core:1.6.3'
    implementation "androidx.compose.ui:ui:1.6.3"
    implementation "androidx.compose.ui:ui-tooling:1.6.3"
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.7.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.7.0'
    implementation 'androidx.activity:activity-compose:1.8.2'

    // Navigation dependencies.
    def nav_version = "2.7.7"
    implementation "androidx.navigation:navigation-fragment:$nav_version"
    implementation "androidx.navigation:navigation-ui:$nav_version"
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"
    implementation "androidx.navigation:navigation-dynamic-features-fragment:$nav_version"
    implementation "androidx.navigation:navigation-compose:$nav_version"

    // Supporting libraries.
    implementation("io.coil-kt:coil-compose:1.3.1")

    // Tailscale dependencies.
    //implementation ':ipn@aar'

    // Tests
    testImplementation "junit:junit:4.12"
    androidTestImplementation "androidx.navigation:navigation-testing:$nav_version"

    // Non-free dependencies.
    playImplementation 'com.google.android.gms:play-services-auth:20.7.0'
}

import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

OperatingSystem os = DefaultNativePlatform.currentOperatingSystem

def hostTag
if (os.isLinux()) {
    // No aarch64 prebuilts
    hostTag = "linux-x86_64"
} else if (os.isMacOsX()) {
    hostTag = "darwin-x86_64"
} else if (os.isWindows()){
    // No aarch64 prebuilts.
    hostTag = "windows-x86_64"
} else {
    throw new GradleException("Unsupported host OS: $os")
}

def toolchainDir = "${android.ndkDirectory}/toolchains/llvm/prebuilt/${hostTag}"

def targetToGoArch = [
    "aarch64-linux-android": "arm64",
    "armv7a-linux-androideabi": "arm",
    "i686-linux-android": "386",
    "x86_64-linux-android": "amd64"
]

def targetToAbi = [
    "aarch64-linux-android": "arm64-v8a",
    "armv7a-linux-androideabi": "armeabi-v7a",
    "i686-linux-android": "x86",
    "x86_64-linux-android": "x86_64"
]

targets.each { target ->
    tasks.create("jniLib-$target", Exec) {
        environment "CC", "${toolchainDir}/bin/$target$ndkLevel-clang"

        // TODO: use cmd/dist or gocross to get the version tags
        def jniLibsDir = "src/main/jniLibs/${targetToAbi[target]}"
        commandLine 'sh', '-c', "mkdir -p $jniLibsDir && GOOS=android GOARM=7 GOARCH=${targetToGoArch[target]} CGO_ENABLED=1 go build -buildmode=c-shared -ldflags=\"-w -s\" -o $jniLibsDir/libtailscale.so ../pkg/tailscale"

        preBuild.dependsOn tasks["jniLib-$target"]
    }
}